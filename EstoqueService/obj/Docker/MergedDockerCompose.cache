name: dockercompose16399110279800269131
services:
  estoqueservice.api:
    build:
      context: C:\Users\elian\source\repos\Project_Korp
      dockerfile: Product.API/Dockerfile
    container_name: estoque-api
    depends_on:
      mongo-init-replica:
        condition: service_completed_successfully
        required: true
      mongodb:
        condition: service_healthy
        required: true
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_HTTP_PORTS: "8080"
      ASPNETCORE_HTTPS_PORTS: "8081"
      ASPNETCORE_URLS: http://+:80
    networks:
      app-network: null
    ports:
      - mode: ingress
        target: 80
        published: "5000"
        protocol: tcp
      - mode: ingress
        target: 8080
        protocol: tcp
      - mode: ingress
        target: 8081
        protocol: tcp
    volumes:
      - type: bind
        source: C:\Users\elian\AppData\Roaming/Microsoft/UserSecrets
        target: /home/app/.microsoft/usersecrets
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Users\elian\AppData\Roaming/ASP.NET/Https
        target: /home/app/.aspnet/https
        read_only: true
        bind:
          create_host_path: true
  mongo-init-replica:
    depends_on:
      mongodb:
        condition: service_healthy
        required: true
    entrypoint:
      - sh
      - -c
      - |2
          until mongosh --host mongodb --eval 'db.adminCommand({ ping: 1 }).ok' --quiet; do sleep 5; done;
          mongosh --host mongodb --eval '
            try {
              rs.initiate({_id: "rs0", members: [{_id: 0, host: "mongodb:27017"}]});
            } catch (e) {
              if (e.codeName === "AlreadyInitialized") {
                cfg = rs.conf();
                cfg.members = [{_id: 0, host: "mongodb:27017"}];
                rs.reconfig(cfg, {force: true});
              } else {
                throw e;
              }
            }';
          touch /data/db/init.lock;
    image: mongo:6.0
    networks:
      app-network: null
    volumes:
      - type: volume
        source: mongo-init
        target: /data/db
        volume: {}
  mongodb:
    command:
      - --replSet
      - rs0
      - --bind_ip_all
    container_name: mongodb
    hostname: mongodb
    healthcheck:
      test:
        - CMD-SHELL
        - |
          mongosh "mongodb://localhost:27017" --eval "db.adminCommand({ ping: 1 }).ok" --quiet
      timeout: 10s
      interval: 10s
      retries: 5
    image: mongo:6.0
    networks:
      app-network: null
    ports:
      - mode: ingress
        target: 27017
        published: "27017"
        protocol: tcp
    volumes:
      - type: volume
        source: mongo-data
        target: /data/db
        volume: {}
networks:
  app-network:
    name: dockercompose16399110279800269131_app-network
volumes:
  mongo-data:
    name: dockercompose16399110279800269131_mongo-data
  mongo-init:
    name: dockercompose16399110279800269131_mongo-init